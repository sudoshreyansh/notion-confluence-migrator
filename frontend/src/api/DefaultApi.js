/**
 * Notion to Confluence Migrator
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import ApiMigratePost200Response from '../model/ApiMigratePost200Response';
import ApiMigratePostRequest from '../model/ApiMigratePostRequest';
import ApiPagesGet200Response from '../model/ApiPagesGet200Response';
import ApiStatusGet200Response from '../model/ApiStatusGet200Response';

/**
* Default service.
* @module api/DefaultApi
* @version 1.0
*/
export default class DefaultApi {

    /**
    * Constructs a new DefaultApi. 
    * @alias module:api/DefaultApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the apiMigratePost operation.
     * @callback module:api/DefaultApi~apiMigratePostCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiMigratePost200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Start a migrator task
     * @param {module:model/ApiMigratePostRequest} apiMigratePostRequest 
     * @param {module:api/DefaultApi~apiMigratePostCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiMigratePost200Response}
     */
    apiMigratePost(apiMigratePostRequest, callback) {
      let postBody = apiMigratePostRequest;
      // verify the required parameter 'apiMigratePostRequest' is set
      if (apiMigratePostRequest === undefined || apiMigratePostRequest === null) {
        throw new Error("Missing the required parameter 'apiMigratePostRequest' when calling apiMigratePost");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ApiMigratePost200Response;
      return this.apiClient.callApi(
        '/api/migrate', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiPagesGet operation.
     * @callback module:api/DefaultApi~apiPagesGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiPagesGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get Notion pages corresponding to the Integrator Auth Token
     * @param {String} notionToken Notion integration auth token
     * @param {module:api/DefaultApi~apiPagesGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiPagesGet200Response}
     */
    apiPagesGet(notionToken, callback) {
      let postBody = null;
      // verify the required parameter 'notionToken' is set
      if (notionToken === undefined || notionToken === null) {
        throw new Error("Missing the required parameter 'notionToken' when calling apiPagesGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'notionToken': notionToken
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiPagesGet200Response;
      return this.apiClient.callApi(
        '/api/pages', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the apiStatusGet operation.
     * @callback module:api/DefaultApi~apiStatusGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/ApiStatusGet200Response} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get status of a task
     * @param {String} taskId Migrator Task ID
     * @param {module:api/DefaultApi~apiStatusGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/ApiStatusGet200Response}
     */
    apiStatusGet(taskId, callback) {
      let postBody = null;
      // verify the required parameter 'taskId' is set
      if (taskId === undefined || taskId === null) {
        throw new Error("Missing the required parameter 'taskId' when calling apiStatusGet");
      }

      let pathParams = {
      };
      let queryParams = {
        'taskId': taskId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ApiStatusGet200Response;
      return this.apiClient.callApi(
        '/api/status', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
